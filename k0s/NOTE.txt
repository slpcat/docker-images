https://docs.k0sproject.io/
https://github.com/Mirantis/cri-dockerd
https://docs.k0sproject.io/v1.27.1+k0s.0/dockershim/

安装cri-docker
到下面的链接下载最新版cri-docker
https://github.com/Mirantis/cri-dockerd/tags

/usr/bin/cri-dockerd
创建cri-docker启动文件
启动文件从下面链接找到。
https://github.com/Mirantis/cri-dockerd/tree/master/packaging/systemd

/usr/lib/systemd/system
这里/usr/bin/cri-dockerd一定要加上参数

–pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.8

https://github.com/k0sproject/k0s/blob/main/docs/k0s-multi-node.md

内置containerd 配置文件
/etc/k0s/containerd.toml

curl -sSLf https://get.k0s.sh | sudo sh

sudo k0s install controller --single

sudo k0s start


k0s default-config > k0s.yaml

k0s install controller -c k0s.yaml

k0s token create --role=worker

k0s worker --cri-socket docker:unix:///var/run/docker.sock <token>.
k0s worker --cri-socket docker:unix:///var/run/cri-dockerd.sock <token>.

#生成集群配置文件
k0s kubeconfig create --groups "system:masters" slpcat > ~/.kube/k0s.config

-----


推荐离线安装
air-gap install
runtime: containerd

https://github.com/k0sproject/k0sctl/releases

wget https://github.com/k0sproject/k0sctl/releases/download/v0.15.0/k0sctl-linux-x64

wget https://github.com/k0sproject/k0s/releases/download/v1.26.0%2Bk0s.0/k0s-v1.26.0+k0s.0-amd64

wget https://github.com/k0sproject/k0s/releases/download/v1.26.0%2Bk0s.0/k0s-airgap-bundle-v1.26.0+k0s.0-amd64

create a k0sctl configuration file:

k0sctl init --k0s > k0sctl.yaml

Deploy the cluster

k0sctl apply --config k0sctl.yaml

Access the cluster

k0sctl kubeconfig > kubeconfig


nerdctl config
/etc/nerdctl/nerdctl.toml

wget https://github.com/containerd/nerdctl/releases/download/v2.1.2/nerdctl-2.1.2-linux-amd64.tar.gz

https://github.com/k0sproject/k0s/blob/main/docs/runtime.md


SystemD#
Create a drop-in directory and add config file with a desired environment variable:

mkdir -p /etc/systemd/system/k0scontroller.service.d
tee -a /etc/systemd/system/k0scontroller.service.d/http-proxy.conf <<EOT
[Service]
Environment=HTTP_PROXY=192.168.33.10:3128
EOT
OpenRC#
Export desired environment variable overriding service configuration in /etc/conf.d directory:

echo 'export HTTP_PROXY="192.168.33.10:3128"' > /etc/conf.d/k0scontroller

docker run -d --name k0s-controller --hostname k0s-controller \
  -v /var/lib/k0s -v /var/log/pods `# this is where k0s stores its data` \
  --tmpfs /run `# this is where k0s stores runtime data` \
  --privileged `# this is the easiest way to enable container-in-container workloads` \
  -p 6443:6443 `# publish the Kubernetes API server port` \
  docker.io/k0sproject/k0s:v1.32.5-k0s.0
