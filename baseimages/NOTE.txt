https://developers.redhat.com/products/rhel/ubi

x86机器上运行arm64以及其他架构 docker
https://github.com/multiarch/qemu-user-static

使用qemu模拟其他架构，arm可以运行x86
sudo apt-get install qemu-user qemu-user-static binfmt-support

https://www.docker.com/blog/multi-platform-docker-builds/

Triple			Aliases				linux	osx	windows
x86_64-linux-gnu	(default), linux, amd64, x86_64	X		
arm-linux-gnueabi	arm, armv5			X		
arm-linux-gnueabihf	armhf, armv7, armv7l		X		
aarch64-linux-gnu	arm64, aarch64			X		
mipsel-linux-gnu	mips, mipsel			X		
powerpc64le-linux-gnu	powerpc, powerpc64, powerpc64le	X		
x86_64-apple-darwin	osx, osx64, darwin, darwin64		X	
x86_64h-apple-darwin	osx64h, darwin64h, x86_64h		X	
i386-apple-darwin	osx32, darwin32				X	
x86_64-w64-mingw32	windows, win64					X
i686-w64-mingw32	win32						X
linux/386
linux/ppc64le
linux/loongarch64
linux/loong64
linux/mips64le


容器内多进程管理
1.supervisord
2.systemd
3.monit
4.dumb-init
5.tini
6.s6 
采用s6-svscan 代替 supervisord 进行程序管理
https://github.com/just-containers/s6-overlay
7.runit VoidLinux
8.OpenRC gentoo,AlpineLinux

docker run -d -t -i --privileged -v /sys/fs/cgroup:/sys/fs/cgroup --tmpfs /run --tmpfs /run/lock  slpcat/debian:systemd-bookworm

日志管理
socklog - system and kernel logging services 替代syslogd

rockylinux

阿里linux


腾讯os
tencentos/tencentos_server31
tencentos/tencentos_server24

CentOS Vault 软件仓库

收录范围
该文件夹提供已经不受支持的 CentOS（不含 CentOS Stream）的历史归档。

sed -e "s|^mirrorlist=|#mirrorlist=|g" \
    -e "s|^#baseurl=http://mirror.centos.org/centos/\$releasever|baseurl=https://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.10|g" \
    -e "s|^#baseurl=http://mirror.centos.org/\$contentdir/\$releasever|baseurl=https://mirrors.tuna.tsinghua.edu.cn/centos-vault/6.10|g" \
    -i.bak \
    /etc/yum.repos.d/CentOS-*.repo

amazonlinux
https://cdn.amazonlinux.com/al2023/os-images/latest/

精简版系统
debian:buster-slim


tinycore linux

Running the command docker buildx install sets up docker builder command as an alias to docker buildx. This results in the ability to have docker build use the current buildx builder.

多架构支持,支持amd64, arm64v8, arm32v7, arm32v6, i386, s390x or ppc64le hosts.
docker run --rm --privileged multiarch/qemu-user-static --reset -p yes 

默认qemu的配置中，是不支持 loongarch 架构的， 所以如果镜像的架构是 loongarch 的话，那需要另外注册。
loong64 需要内核6.0以上以及cgroup-v2

1、下载  qemu-loongarch64-static，放到/usr/bin 目录

https://github.com/multiarch/qemu-user-static/releases/download/v7.2.0-1/qemu-loongarch64-static.tar.gz

2、 注册 loongarch

echo ":qemu-loongarch64:M::\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x02\x01:\xff\xff\xff\xff\xff\xfe\xfe\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff:/usr/bin/qemu-loongarch64-static:" > /proc/sys/fs/binfmt_misc/register

或者
# Register qemu-user-static 
docker run --rm --privileged loongcr.lcpu.dev/multiarch/archlinux --reset -p yes
# Run loong64 containers
docker run --rm -it --name hello loongcr.lcpu.dev/lcpu/debian:unstable-240513 bash

#https://github.com/dbhi/qus
#docker run --rm --privileged aptman/qus -s -- -p

#推荐:  https://github.com/tonistiigi/binfmt

docker run --privileged --rm tonistiigi/binfmt --install all

#去除多架构支持
#docker run --rm --privileged aptman/qus -- -r


使用镜像加速优化
https://github.com/moby/buildkit/blob/master/docs/buildkitd.toml.md

新建配置文件 buildkitd.toml
# buildkitd.toml
[registry."docker.io"]
  mirrors = ["wlzfs4t4.mirror.aliyuncs.com"]

创建本地 builder
### create builder with mirror
docker buildx create --use --name localbuilder --platform=linux/amd64,linux/arm64,linux/riscv64 --config=/etc/docker/buildkitd.toml

docker buildx build -t slpcat/debian10:slim-s6  --platform=linux/arm,linux/arm64,linux/amd64,linux/riscv64 . --push

使用buildx 替代build
docker buildx install
docker buildx  uninstall

docker build -t slpcat/debian:buster --platform=linux/arm64,linux/amd64,linux/riscv64 . --push

The hard way with docker manifest
docker manifest create \
your-username/multiarch-example:manifest-latest \
--amend your-username/multiarch-example:manifest-amd64 \
--amend your-username/multiarch-example:manifest-arm32v7 \
--amend your-username/multiarch-example:manifest-arm64v8

docker manifest push your-username/multiarch-example:manifest-latest

Docker 的镜像签名
https://docs.docker.com/engine/security/trust/trust_automation/
export DOCKER_CONTENT_TRUST=1
export DOCKER_CONTENT_TRUST_SERVER=https://10.211.55.27:4443



https://github.com/linuxhq/rpmbuild-snoopy

Snoopy is a tiny library that logs all executed commands (+ arguments) on your system.

https://github.com/carlosedp/riscv-bringup


runtime 

https://github.com/gotoz/runq


genie，可用用它来加载 systemd
udo apt install apt-transport-https

sudo wget -O /etc/apt/trusted.gpg.d/wsl-transdebian.gpg https://arkane-systems.github.io/wsl-transdebian/apt/wsl-transdebian.gpg

sudo chmod a+r /etc/apt/trusted.gpg.d/wsl-transdebian.gpg

sudo cat << EOF > /etc/apt/sources.list.d/wsl-transdebian.list
deb https://arkane-systems.github.io/wsl-transdebian/apt/ $(lsb_release -cs) main
deb-src https://arkane-systems.github.io/wsl-transdebian/apt/ $(lsb_release -cs) main
EOF

sudo apt update
sudo apt -y install systemd-genie

docker直接使用独立网卡 多网卡/sr-iov vf网卡 推荐
https://github.com/yunify/docker-plugin-hostnic
docker run -d --restart=always -v /run/docker/plugins:/run/docker/plugins -v /etc/docker/hostnic:/etc/docker/hostnic --network host --privileged qingcloud/docker-plugin-hostnic docker-plugin-hostnic
docker network create -d hostnic --subnet=192.168.1.0/24 --gateway 192.168.1.1 hostnic

docker run -it --ip 192.168.1.5 --mac-address 52:54:0e:e5:00:f7 --network hostnic ubuntu:14.04 bash

docker使用ipvlan虚拟网卡  虚拟网卡桥接到弹性网卡 可用ip数量=弹性网卡数*每个弹性网卡的ip数量
当前规格一台bcc.d1s.c24m96 最多8*10=80个IP

创建网络 子网/网关 同宿主机网络
docker network create -d ipvlan --subnet=192.168.1.0/24 --gateway 192.168.1.1 -o  parent=eth1 -o ipvlan_mode=l3 ipvlan

关联docker容器 ip为弹性网卡地址/辅助地址
docker run -d -it --net=ipvlan --ip=192.168.1.11 --name test   debian:bullseye bash

compose.yml
networks:
  maclan70:
    driver: macvlan
    driver_opts:
      parent: eno1.70
    ipam:
      config:
      - subnet: 192.168.70.0/24
        gateway: 192.168.70.1
        ip_range: 192.168.70.128/25
sriov 网卡或者直通
https://github.com/Mellanox/docker-sriov-plugin

$ docker run -d --restart=always -v /run/docker/plugins:/run/docker/plugins -v /etc/docker:/etc/docker -v /var/run:/var/run --net=host --privileged rdma/sriov-plugin
$ docker network create -d sriov --subnet=194.168.1.0/24 -o netdevice=ens2f0 -o vlan=200 customer2
$ docker network create -d sriov --subnet=194.168.1.0/24 -o netdevice=ens2f0 -o vlan=100 -o privileged=1 customer1
$ docker network create -d sriov --subnet=194.168.1.0/24 -o netdevice=ens2f0 -o mode=passthrough mynet



https://github.com/wojiushixiaobai/kubernetes-loongarch64/releases

